//
//  DropIO.m
//  DropIO
//
//  Created by Chris Patterson on 11/11/08.
//  Copyright 2008 Chris Patterson. All rights reserved.
//

#import "DropIO.h"
#import "XMLToObjectParser.h"

/**
* NSString category to encode a string so it can be used in an HTTP POST body.
* Used by NSMutableURLRequest(httpFormEncoding) category, below.
*/

@implementation NSString (httpFormEncoding)

/**
 * Encodes the receiver using HTTP form encoding.
 * @return NSString containing the HTTP form-encoded string.
 */
- (NSString*)stringUsingHTTPFormEncoding
{
	NSString *result = (NSString *) CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault, (CFStringRef)self, NULL, CFSTR("?=&+"), kCFStringEncodingUTF8);
	return [result autorelease];
}

@end

/**
* NSMutableURLRequest category to provide a method to
* set the HTTP POST body from a dictionary of parameters.
* Used in DropIODrop factory methods, below.
*/

@implementation NSMutableURLRequest (httpFormEncoding)

/**
 * Sets the HTTP body of the receiver to the name-value pairs in the given dictionary
 * encoded using HTML form url-encoding. Also sets the "Content-Type" and "Content-Length"
 * HTTP header field values for the receiver.
 *
 * @param postParams
 * NSDictionary containing name-value pairs to be encoded into the HTTP body.
 */
- (void) setHTTPPostBody:(NSDictionary*)postParams
{
	NSMutableString* postBody = [[NSMutableString alloc] init];
	NSUInteger keyCount = [postParams count];
	NSUInteger k = 0;
	for (id key in postParams)
	{
		[postBody appendFormat:@"%@=%@", key, [[postParams objectForKey:key] stringUsingHTTPFormEncoding]];
		if (++k != keyCount)
			[postBody appendString:@"&"];
	}
	
	//NSLog(@"HTTP POST Data: %@", postBody);
	
	NSData*   postData   = [postBody dataUsingEncoding:NSASCIIStringEncoding];
	NSString* postLength = [NSString stringWithFormat:@"%d", [postData length]];
	[self setHTTPBody:postData];
	[self setValue:postLength forHTTPHeaderField:@"Content-Length"];
	[self setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];
	
	[postBody release];
}

@end

/**
* DropIO class which provides static DropIODrop factory methods.
*/

@implementation DropIO

static NSString*	apiKey = nil;		/**< Static string holding the Drop.io API key. */
static NSError*		lastError = nil;	/**< Static NSError object holding the last error generated by DropKit. */

/**
 * Sets the Drop.io API key.
 *
 * @param aKey
 * NSString containing the new API key value.
 *
 * @see #APIKey
 * @see #checkAPIKey
 */
+ (void) setAPIKey:(NSString*)aKey
{
	[aKey retain];
	[apiKey release];
	apiKey = aKey;
}

/**
 * Get the API key.
 *
 * @return NSString containing the Drop.io API key value to use in requests.
 */
+ (NSString*) APIKey
{
	return apiKey;
}

/**
 * Check that the Drop.io API key has been set.
 * DropKit requires the API key value to be set for API calls to work correctly.
 *
 * @return Boolean true if the API key has been set.
 * @see #setAPIKey:
 * @see #APIKey
 */
+ (BOOL) checkAPIKey
{
	if (apiKey == nil)
	{
		NSLog(@"Error: DropIO API key not set.");
		return false;
	}
	return true;
}

/**
 * Returns the last error generated from a DropKit API call.
 * Details about the error are contained in the <i>userInfo</i> property
 * of the returned object, using the following keys:
 * <dl>
 * <dt><b>kDropIOErrorAction</b><dd>The API action that caused the error.
 * <dt><b>kDropIOErrorMessage</b><dd>The error message returned from drop.io.
 * <dt><b>kDropIOErrorResult</b><dd>Result of the action; usually "Success" or "Failure"
 * <dt><b>kDropIOErrorAPIURL</b><dd>The drop.io URL that caused the error.
 * </dl>
 *
 * @return NSError object describing the last Drop.io API error that occurred.
 * @see #setLastError:
 */
+ (NSError*) lastError
{
	return lastError;
}

/**
 * Sets the last DropKit error to the given NSError object.
 * Should not be called outside DropKit source code.
 * Called within DropKit code when API errors occur.
 * 
 *
 * @param dropioError
 * NSError object containing information about the last Drop.io API error.
 */
+ (void) setLastError:(NSError*)dropioError
{
	if (dropioError != lastError)
	{
		[dropioError retain];
		[lastError release];
		lastError = dropioError;
	}
}

/**
 * Error handling method called to handle errors returned from other DropIO method calls.
 * Sets {@link lastError} to the given error object. If the error result is not "Success",
 * logs the error information to the console.
 *
 * @param error
 * NSError containing information about the DropIO API error that occurred.
 */
+ (void) errorHandler:(NSError*)error
{
	if (error != nil)
	{
		[DropIO setLastError:error];
		
		if (![[[error userInfo] objectForKey:kDropIOErrorResult] isEqualToString:kDropIOErrorResult_Success])
		{
			NSLog(@"Error: %@", error);
			for (id key in [error userInfo])
			{
				NSLog(@"  %@: %@", key, [[error userInfo] valueForKey:key]);
			}
		}
	}
}

/**
 * Parses Drop.io API response data returned from the given URL. 
 * Converts XML nodes with the given <i>nodeName</i> in the response
 * to objects of the given <i>className</i>. If any error occurs,
 * the <i>error</i> parameter points to an NSError object on return.
 *
 * @param url
 * NSURL object pointing to a Drop.io API URL.
 *
 * @param nodeName
 * NSString containing the name of target XML nodes in the returned response
 * which are to be converted into objects.
 *
 * @param className
 * NSString containing the name of an objective-c class to instantiate
 * from the given XML node.
 *
 * @param error
 * NSError reference which will point to an NSError object on output if 
 * any API error occurs. Pass nil to ignore API errors.
 *
 * @return NSArray of objects of the given className; one instance per matched XML node
 * in the API response.
 *
 * @see #parseResponse:fromNodeName:toObject:parseError:
 * @see XMLToObjectParser#parseXMLAtURL:fromNodeName:toObject:parseError:
 */
+ (NSArray*) parseResponseFromURL:(NSURL*)url
					 fromNodeName:(NSString *)nodeName
						 toObject:(NSString *)className 
					   parseError:(NSError **)error
{
	// clear any previous DropIOError
	[DropIO setLastError:nil];
	
	XMLToObjectParser* x2o = [[XMLToObjectParser alloc] init];
	[x2o parseXMLAtURL:url
		  fromNodeName:nodeName
			  toObject:className
		    parseError:error];
	if (error != nil && (*error) != nil)
	{
		[DropIO errorHandler:*error];
	}
	
	NSArray* result = [x2o items];
	[[result retain] autorelease];
	[x2o release];
	return result;
}

/**
 * Parses the Drop.io API response contained in the given NSData object. 
 * Converts XML nodes with the given <i>nodeName</i> in the response
 * to objects of the given <i>className</i>. If any error occurs,
 * the <i>error</i> parameter points to an NSError object on return.
 *
 * @param responseData
 * NSData containing the XML response returned from a Drop.io API HTTP request.
 *
 * @param nodeName
 * NSString containing the name of target XML nodes in the returned response
 * which are to be converted into objects.
 *
 * @param className
 * NSString containing the name of an objective-c class to instantiate
 * from the given XML node.
 *
 * @param error
 * NSError reference which will point to an NSError object on output if 
 * any API error occurs. Pass nil to ignore API errors.
 *
 * @return NSArray of objects of the given className; one instance per matched XML node
 * in the response data.
 *
 * @see #parseResponseFromURL:fromNodeName:toObject:parseError:
 * @see XMLToObjectParser#parseXMLData:fromNodeName:toObject:parseError:
 */
+ (NSArray*) parseResponse:(NSData*)responseData
			  fromNodeName:(NSString *)nodeName
				  toObject:(NSString *)className 
				parseError:(NSError **)error
{
	// clear any previous DropIOError
	[DropIO setLastError:nil];
	
	XMLToObjectParser* x2o = [[XMLToObjectParser alloc] init];
	[x2o parseXMLData:responseData
		 fromNodeName:nodeName
			 toObject:className
		   parseError:error];
	if (error != nil && (*error) != nil)
	{
		[DropIO errorHandler:*error];
	}
	
	NSArray* result = [x2o items];
	[[result retain] autorelease];
	[x2o release];
	return result;
}

/**
 * Basic bottleneck method for Drop.io RESTful drop operations.
 * Builds and sends an HTTP request to the given Drop.io API URL with the HTTP method specified by <i>opString</i>,
 * and an HTTP body built from the given dictionary of name/value parameter pairs.
 * Sets {@link #lastError} if an API error occurs.
 *
 * @param opString
 * NSString containing the HTTP request method ("GET", "POST", "PUT", or "DELETE").
 *
 * @param urlStr
 * NSString containing the Drop.io API URL to send the HTTP request to.
 *
 * @param params
 * NSDictionary containing name-value pairs to be used to construct the HTTP request body.
 *
 * @return {@link DropIODrop} instance returned from the API, if present, or nil.
 */
+ (DropIODrop*) dropOperation:(NSString*)opString atUrl:(NSString*)urlStr withParameters:(NSDictionary*)params
{
	// clear any previous DropIOError
	[DropIO setLastError:nil];
	
	if (![DropIO checkAPIKey])
		return nil;
	
	// Create an HTTP POST URL request pointing to the drop.io API URL.
	NSMutableURLRequest* dropReq = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:urlStr]];
	[dropReq setHTTPMethod:opString];
	[dropReq setHTTPPostBody:params];	// Method added by NSMutableURLRequest(httpFormEncoding) category, defined above.
	
	// Send the request and get the drop XML response synchronously (for now).
	NSURLResponse* dropResp = nil;
	NSError* error = nil;
	NSData* dropXmlData = [NSURLConnection sendSynchronousRequest:dropReq 
												returningResponse:&dropResp 
															error:&error];
	[dropReq release];
	
	// dropResp should be autoreleased, but it leaks in iPhone OS prior to 2.2.
	// Some suggest using the call below to clean up the response object.
	[[NSURLCache sharedURLCache] removeAllCachedResponses];
	
	if (error != nil)
	{
		NSLog(@"HTTP %@ Error: %@", opString, error);
		[DropIO setLastError:error];
		return nil;
	}
	
	// Got a response, so parse the XML into DropIODrop objects
	DropIODrop* drop = nil;
	NSArray* dropArray = [self parseResponse:dropXmlData
								fromNodeName:@"drop"
									toObject:@"DropIODrop"
								  parseError:&error];
	if ((dropArray == nil) || ([dropArray count] == 0))
		return nil;
	
	drop = [dropArray objectAtIndex:0];
	return [[drop retain] autorelease];
}

/**
 * Creates a new drop with the given parameters.
 * Sets {@link #lastError} if an API error occurs.
 * 
 * @param params
 * NSDictionary containing name-value pairs specifying the properties of the new drop.
 * See <a href="http://groups.google.com/group/dropio-api/web/full-api-documentation">the Drop.io API documentation</a> for parameter details.
 *
 * @return A new autoreleased {@link DropIODrop} instance returned from the API.
 */
+ (DropIODrop*) dropWithParameters:(NSDictionary*)params
{
	return [DropIO dropOperation:@"POST" 
						   atUrl:kDropIONewDropUrl 
				  withParameters:params];
}

/**
 * Updates an existing drop with the given parameters.
 * Sets {@link #lastError} if an API error occurs.
 * 
 * @param dropName
 * NSString containing the name of the drop to be updated.
 *
 * @param params
 * NSDictionary containing name-value pairs specifying the updated properties for the drop.
 * See <a href="http://groups.google.com/group/dropio-api/web/full-api-documentation">the Drop.io API documentation</a> for parameter details.
 */
+ (void) updateDropNamed:(NSString*)dropName withParameters:(NSDictionary*)params
{
	[DropIO dropOperation:@"PUT" 
					atUrl:[NSString stringWithFormat:kDropIOUpdateDropUrlFormat, dropName] 
		   withParameters:params];
}

/**
 * Deletes an existing drop with the given parameters
 * Sets {@link #lastError} if an API error occurs.
 * 
 * @param dropName
 * NSString containing the name of the drop to be deleted.
 *
 * @param params
 * NSDictionary containing name-value pairs specifying the required properties for deleting the drop.
 * See <a href="http://groups.google.com/group/dropio-api/web/full-api-documentation">the Drop.io API documentation</a> for parameter details.
 */
+ (void) deleteDropNamed:(NSString*)dropName withParameters:(NSDictionary*)params
{
	[DropIO dropOperation:@"DELETE" 
					atUrl:[NSString stringWithFormat:kDropIOUpdateDropUrlFormat, dropName] 
		   withParameters:params];
}

/**
 * Creates a new drop with a random name and default properties.
 * Sets {@link #lastError} if an API error occurs.
 *
 * @return A new autoreleased {@link DropIODrop} instance returned from the API.
 */
+ (DropIODrop*) dropWithRandomName
{
	if (![DropIO checkAPIKey])
		return nil;
	
	NSMutableDictionary* params = [NSMutableDictionary dictionaryWithCapacity:3];
	[params setObject:kDropIOParamValue_Format_XML		forKey:kDropIOParamKey_Format];
	[params setObject:kDropIOParamValue_Version_Latest	forKey:kDropIOParamKey_Version];
	[params setObject:apiKey							forKey:kDropIOParamKey_APIKey];
	
	return [DropIO dropWithParameters:params];
}

/**
 * Creates a new drop with the given name.
 * Sets {@link #lastError} if an API error occurs.
 *
 * @param aName
 * NSString containing the name to give to the new drop.
 *
 * @return A new autoreleased {@link DropIODrop} instance returned from the API.
 */
+ (DropIODrop*) dropWithName:(NSString*)aName
{
	if (![DropIO checkAPIKey])
		return nil;
	
	NSMutableDictionary* params = [NSMutableDictionary dictionaryWithCapacity:4];
	[params setObject:kDropIOParamValue_Format_XML		forKey:kDropIOParamKey_Format];
	[params setObject:kDropIOParamValue_Version_Latest	forKey:kDropIOParamKey_Version];
	[params setObject:apiKey							forKey:kDropIOParamKey_APIKey];
	[params setObject:aName								forKey:kDropIOParamKey_Name];
	
	return [DropIO dropWithParameters:params];
}

/**
 * Creates a new drop with the given name and admin password.
 * Sets {@link #lastError} if an API error occurs.
 *
 * @param aName
 * NSString containing the name to give to the new drop.
 *
 * @param aPassword
 * NSString containing the admin password to use for the new drop.
 *
 * @return A new autoreleased {@link DropIODrop} instance returned from the API.
 */
+ (DropIODrop*) dropWithName:(NSString*)aName andPassword:(NSString*)aPassword
{
	if (![DropIO checkAPIKey])
		return nil;
	
	NSMutableDictionary* params = [NSMutableDictionary dictionaryWithCapacity:5];
	[params setObject:kDropIOParamValue_Format_XML		forKey:kDropIOParamKey_Format];
	[params setObject:kDropIOParamValue_Version_Latest	forKey:kDropIOParamKey_Version];
	[params setObject:apiKey							forKey:kDropIOParamKey_APIKey];
	[params setObject:aName								forKey:kDropIOParamKey_Name];
	[params setObject:aPassword							forKey:kDropIOParamKey_AdminPassword];
	
	return [DropIO dropWithParameters:params];
}

/**
 * Returns an NSURL object pointing to the Drop.io API URL for the drop with the given name and security token.
 *
 * @param dropName
 * NSString containing the name of the drop.
 *
 * @param aToken
 * NSString containing the security token for the drop.
 *
 * @return An autoreleased NSURL object pointing to the given drop.
 */
+ (NSURL*) URLForDropNamed:(NSString*)dropName withToken:(NSString*)aToken
{
	if (![DropIO checkAPIKey])
		return nil;
	
	NSString* urlStr = [[NSString alloc] initWithFormat:kDropIODropUrlFormat, 
						dropName, 
						kDropIOParamKey_APIKey,  [DropIO APIKey], 
						kDropIOParamKey_Format,  kDropIOParamValue_Format_XML,
						kDropIOParamKey_Version, kDropIOParamValue_Version_Latest,
						kDropIOParamKey_Token,   aToken];
	NSURL* url = [[[NSURL alloc] initWithString:urlStr] autorelease];
	[urlStr release];
	return url;
}

/**
 * Finds an existing drop with the given name and no authentication.
 * The <i>pError</i> parameter will point to an NSError object on return if any API error occurs.
 *
 * @param aName
 * NSString containing the name of the drop to find.
 *
 * @param pError
 * NSError reference which will point to an NSError object on return if any error occurs.
 * Pass nil to ignore API errors.
 *
 * @return An autoreleased {@link DropIODrop} object identified by the given drop name.
 */
+ (DropIODrop*) findDropNamed:(NSString*)aName error:(NSError**)pError
{
	return [DropIO findDropNamed:aName withToken:@"" error:pError];
}

/**
 * Find an existing drop with the given name and security token or password.
 * The <i>pError</i> parameter will point to an NSError object on return if any API error occurs.
 *
 * @param aName
 * NSString containing the name of the drop to find.
 *
 * @param aToken
 * NSString containing either a security token (the {@link DropIODrop#adminToken} or {@link DropIODrop#guestToken}) 
 * previously returned from the API, or a password supplied by the user.
 *
 * @param pError
 * NSError reference which will point to an NSError object on return if any error occurs.
 * Pass nil to ignore API errors.
 *
 * @return An autoreleased {@link DropIODrop} object identified by the given drop name.
 */
+ (DropIODrop*) findDropNamed:(NSString*)aName withToken:(NSString*)aToken error:(NSError**)pError
{
	return [DropIO findDropAtAPIURL:[DropIO URLForDropNamed:aName withToken:aToken] error:pError];
}

/**
 * Find an existing drop given the drop.io API URL.
 * The <i>pError</i> parameter will point to an NSError object on return if any API error occurs.
 *
 * @param dropAPIURL
 * NSURL pointing to the Drop.io API URL for a drop.
 *
 * @param pError
 * NSError reference which will point to an NSError object on return if any error occurs.
 * Pass nil to ignore API errors.
 *
 * @return An autoreleased {@link DropIODrop} object identified by the given drop URL.
 */
+ (DropIODrop*) findDropAtAPIURL:(NSURL*)dropAPIURL error:(NSError**)pError
{
	DropIODrop* drop = nil;
	NSArray* dropArray = [self parseResponseFromURL:dropAPIURL
									   fromNodeName:@"drop"
										   toObject:@"DropIODrop"
										 parseError:pError];
	if ((dropArray == nil) || ([dropArray count] == 0))
		return nil;
	
	drop = [dropArray objectAtIndex:0];
	return [[drop retain] autorelease];
}

/**
 * Returns a string containing a drop name given a drop.io drop URL.
 * Strips the protocol and hostname from the absolute path of the URL.
 *
 * @param dropURL
 * NSURL instance pointing to a drop.io drop URL.
 *
 * @return An autoreleased NSString containing the drop name.
 */
+ (NSString*) dropNameFromDropURL:(NSURL*)dropURL
{
	NSString* dropName = nil;
	
	NSString* dropUrlStr = [dropURL absoluteString];
	NSRange r = [dropUrlStr rangeOfString:@"http://drop.io/"];
	if (r.location == NSNotFound)
		r = [dropUrlStr rangeOfString:@"http://www.drop.io/"];
	
	if (r.location != NSNotFound)
	{
		NSRange nameRange = NSMakeRange(r.location + r.length, 0);
		NSRange qRange = [dropUrlStr rangeOfString:@"?"];
		if (qRange.location != NSNotFound)
			nameRange.length = qRange.location - nameRange.location;
		else
			nameRange.length = [dropUrlStr length] - nameRange.location;
		dropName = [dropUrlStr substringWithRange:nameRange];
	}
	return dropName;
}

/**
 * Find an existing drop from a (non-API) Drop.io drop URL.
 * The <i>pError</i> parameter will point to an NSError object on return if any API error occurs.
 *
 * @param dropURL
 * NSURL pointing to the Drop.io web URL for a drop.
 *
 * @param pError
 * NSError reference which will point to an NSError object on return if any error occurs.
 * Pass nil to ignore API errors.
 *
 * @return An autoreleased {@link DropIODrop} object identified by the given drop URL.
 */
+ (DropIODrop*) findDropAtDropURL:(NSURL*)dropURL error:(NSError**)pError
{
	NSString* dropName = [DropIO dropNameFromDropURL:dropURL];
	if (dropName != nil)
	{
		// For some reason the FAQ drop is not available through the API, 
		// so don't treat it as a drop link.
		if (![dropName isEqualToString:@"faq"]) 
			return [DropIO findDropNamed:dropName error:pError];
	}
	
	if (pError != nil)
	{
		NSDictionary* dict = [NSDictionary dictionaryWithObjectsAndKeys:
							  @"Given URL is not a Drop.io drop URL", NSLocalizedFailureReasonErrorKey,
							  dropURL, kDropIOErrorAPIURL,
							  nil];
		*pError = [NSError errorWithDomain:kDropIOErrorDomain code:kDropIOErrorCode_NotDropURL userInfo:dict];
	}
	return nil; // not a drop URL
}

@end
